{"version":3,"sources":["containers/Quiz/Quiz.module.scss","components/ActiveQuiz/ActiveQuiz.module.scss","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.module.scss","components/FinishedQuiz/FinishedQuiz.module.scss","components/UI/Button/Button.module.scss","hoc/Layout/Layout.module.scss","components/ActiveQuiz/AnswersList/AnswersList.module.scss","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","React","Component","AnswerItem","questionResultClasses","userAnswer","push","onClick","onAnswerClick","answer","id","join","text","AnswersList","answers","map","index","key","userAnswers","ActiveQuiz","Question","questionNumber","question","quizLength","Button","cls","type","disabled","FinishedQuiz","succesCount","Object","keys","results","reduce","total","quiz","quizItem","length","onRetry","Quiz","state","activeQuestionNumber","isFinished","rightAnswerId","onAnswerClickHandler","answerId","setState","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57f0465b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__2THIz\",\"QuizWrapper\":\"Quiz_QuizWrapper__2wTef\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__2OH8k\",\"Question\":\"ActiveQuiz_Question__3-k9k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__uovHA\",\"success\":\"AnswerItem_success__XCXzE\",\"error\":\"AnswerItem_error__2qb2c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__2aARn\",\"success\":\"FinishedQuiz_success__2EeEd\",\"error\":\"FinishedQuiz_error__2PlTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2Ajf-\",\"error\":\"Button_error__A4xET\",\"success\":\"Button_success__qdwm8\",\"primary\":\"Button_primary__CVuDV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__ACkHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__1ulOJ\"};","import React from \"react\";\nimport classes from \"./Layout.module.scss\"\n\nexport default class Layout extends React.Component{\n  render() {\n    return(\n      <div className={classes.Layout}>\n        <main>\n          {this.props.children}\n        </main>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport classes from './AnswerItem.module.scss'\n\nconst AnswerItem = props => {\n  const questionResultClasses = [classes.AnswerItem];\n  if (props.userAnswer) {\n    questionResultClasses.push(classes[props.userAnswer]);\n  }\n\n  return (\n    <li\n    onClick={() => props.onAnswerClick(props.answer.id)}\n      className={questionResultClasses.join(' ')}>\n      {props.answer.text}\n    </li>\n  );\n}\n\nexport default AnswerItem;\n","import React from 'react';\nimport classes from './AnswersList.module.scss';\nimport AnswerItem from './AnswerItem/AnswerItem';\n\nconst AnswersList = props => (\n  <ul className={classes.AnswersList}>\n    {props.answers.map((answer, index) => {\n      return <AnswerItem\n        key={index}\n        answer={answer}\n        userAnswer={props.userAnswers ? props.userAnswers[answer.id] : null}\n        onAnswerClick={props.onAnswerClick}/>\n    })}\n  </ul>\n);\n\nexport default AnswersList;\n","import React from \"react\";\nimport classes from \"./ActiveQuiz.module.scss\"\nimport AnswersList from './AnswersList/AnswersList';\n\nconst ActiveQuiz = props => (\n  <div className={classes.ActiveQuiz}>\n    <p className={classes.Question}>\n      <span>\n        <strong>{props.questionNumber}. </strong>{props.question}\n      </span>\n      <small>{props.questionNumber} of {props.quizLength}</small>\n    </p>\n    <AnswersList\n      userAnswers={props.userAnswers}\n      answers={props.answers}\n      onAnswerClick={props.onAnswerClick}/>\n  </div>\n)\n\nexport default ActiveQuiz\n","import React from 'react';\nimport classes from './Button.module.scss'\n\nconst Button = props => {\n  const cls = [\n    classes.Button,\n    classes[props.type]\n  ]\n\n  return (\n    <button\n      onClick={props.onClick}\n      className={cls.join(' ')}\n      disabled={props.disabled}>\n      {props.children}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react';\nimport classes from './FinishedQuiz.module.scss'\nimport Button from '../UI/Button/Button';\n\nconst FinishedQuiz = props => {\n  const succesCount = Object.keys(props.results).reduce((total, key) => {\n    if (props.results[key] === 'success') {\n      ++total;\n    }\n    return total;\n  }, 0)\n  return (\n    <div className={classes.FinishedQuiz}>\n      <ul>\n        {props.quiz.map((quizItem, index) => {\n          const cls = [\n            'fa',\n            props.results[quizItem.id] === 'error' ? 'fa-times' : 'fa-check',\n            classes[props.results[quizItem.id]]\n          ];\n          return (\n            <li key={index}>\n              <strong>{index + 1}. </strong>\n              {quizItem.question}\n              <i className={cls.join(' ')}/>\n            </li>\n          )\n        })}\n      </ul>\n      <p>Right answers {succesCount} of {props.quiz.length}</p>\n\n      <div>\n        <Button onClick={props.onRetry} type='primary'>\n          Repeat\n        </Button>\n        <Button onClick={props.onRetry} type='success'>\n          Go to all quizes\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default FinishedQuiz;\n","import React, {Component} from 'react';\rimport classes from './Quiz.module.scss'\rimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\rimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\r\rexport default class Quiz extends Component {\r  state = {\r    activeQuestionNumber: 0,\r    isFinished: false,\r    results: {},\r    answers: '',\r    quiz: [\r      {\r        id: 1,\r        question: 'Who is the Patron Saint of Spain?',\r        rightAnswerId: 1,\r        answers: [\r          {id: 1, text: 'St James'},\r          {id: 2, text: 'St John'},\r          {id: 3, text: 'St Benedict'}\r        ]\r      },\r      {\r        id: 2,\r        question: 'Which of these means a speech in a play where a character talks to themselves rather than to other characters?',\r        rightAnswerId: 2,\r        answers: [\r          {id: 1, text: 'Interlude'},\r          {id: 2, text: 'Revue'},\r          {id: 3, text: 'Soliloquy'}\r        ]\r      },\r      {\r        id: 3,\r        question: 'In the Vicar of Dibley, what was the name of the vicar\\'s clueless friend?',\r        rightAnswerId: 2,\r        answers: [\r          {id: 1, text: 'Beatrice'},\r          {id: 2, text: 'Charlotte'},\r          {id: 3, text: 'Alice'}\r        ]\r      },\r      {\r        id: 4,\r        question: 'Casterly Rock is the ancestral home of which family in Game of Thrones?',\r        rightAnswerId: 1,\r        answers: [\r          {id: 1, text: 'The Starks'},\r          {id: 2, text: 'The Tully\\'s'},\r          {id: 3, text: 'The Lannisters'}\r        ]\r      }\r    ]\r  }\r\r  onAnswerClickHandler = answerId => {\r    if (this.state.answers) {\r      const key = Object.keys(this.state.answers)[0]\r      if (this.state.answers[key] === 'success') {\r        return;\r      }\r    }\r\r    const question = this.state.quiz[this.state.activeQuestionNumber];\r    const results = this.state.results;\r    if (question.rightAnswerId === answerId) {\r      if (!results[answerId]) {\r        results[answerId] = 'success'\r      }\r      this.setState({\r        answers: {[answerId]: 'success'},\r        results\r      });\r      const timeout = window.setTimeout(() => {\r        if (this.isQuizFinished()) {\r          this.setState({\r            isFinished: true\r          })\r        } else {\r          this.setState({\r            activeQuestionNumber: this.state.activeQuestionNumber + 1,\r            answers: ''\r          });\r        }\r        window.clearTimeout(timeout);\r      }, 1000);\r    } else {\r      results[question.id] = 'error';\r      this.setState({\r        answers: {[answerId]: 'error'},\r        results\r      })\r    }\r  }\r\r  retryHandler = () => {\r    this.setState({\r      activeQuestionNumber: 0,\r      answers: null,\r      isFinished: false,\r      results: {}\r    })\r  }\r\r  isQuizFinished() {\r    return this.state.activeQuestionNumber + 1 === this.state.quiz.length;\r  }\r\r  render() {\r    return (\r      <div className={classes.Quiz}>\r        <div className={classes.QuizWrapper}>\r          <h1>Answer on the above question</h1>\r          {\r            this.state.isFinished\r              ? <FinishedQuiz\r                onRetry={this.retryHandler}\r                results={this.state.results}\r                quiz={this.state.quiz}/>\r              : <ActiveQuiz\r                onAnswerClick={this.onAnswerClickHandler}\r                answers={this.state.quiz[this.state.activeQuestionNumber].answers}\r                question={this.state.quiz[this.state.activeQuestionNumber].question}\r                quizLength={this.state.quiz.length}\r                questionNumber={this.state.activeQuestionNumber + 1}\r                userAnswers={this.state.answers}/>\r          }\r        </div>\r      </div>\r    )\r  }\r}\r","import React from 'react';\nimport './App.css';\nimport Layout from \"./hoc/Layout/Layout\";\nimport Quiz from \"./containers/Quiz/Quiz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Quiz/>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}